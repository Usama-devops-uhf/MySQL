As a DevOps engineer, mastering Linux commands is crucial for efficient system troubleshooting and management.

1. System Monitoring & Performance

CPU Usage:

top – Real-time process and resource usage.

htop – Enhanced process viewer.

sar – Historical resource usage.

Memory Usage:

free -h – Memory usage overview.

cat /proc/meminfo – Detailed memory statistics.

Disk Usage:

df -h – Disk usage by filesystem.

du -sh <path> – Directory size.

Network Usage:

netstat -tuln or ss -tuln – Active connections.

iftop – Real-time bandwidth usage.

ping <IP/hostname> – Connectivity check.

2. File and Directory Management

File Management:

ls -lh – List files with details.

cat, less, more – View file content.

find /path -name "*.log" – Search files.


Permissions:

chmod 755 <file> – Change file permissions.

chown user:group <file> – Change ownership.

3. User and Group Management

Users:

id <username> – User details.

adduser <username> – Add a user.

passwd <username> – Change user password.


Groups:

groups <username> – User groups.

usermod -aG <group> <username> – Add user to a group.

Logged-In Users:

who – List logged-in users.

last – Login history.

4. Process Management

View Processes:

ps aux – List processes.

pgrep <name> – Search for a process.


Manage Processes:

kill -9 <PID> – Kill a process by ID.

pkill <name> – Kill a process by name.

Logs:

journalctl – View system logs.

dmesg – Kernel messages.

tail -f /var/log/<file> – Monitor logs in real-time.

5. Networking

Connectivity:

curl -I <url> – Test HTTP connection.

ping <IP/hostname> – Test network.

traceroute <hostname> – Trace network route.

Debugging:

telnet <host> <port> – Test open ports.

dig <hostname> – DNS lookup.

6. Disk and Filesystem Management

Filesystem:

fsck /dev/sda1 – Check filesystem.

mount and umount – Mount/unmount filesystems.

Disk Partitioning:

fdisk -l – Partition details.

lsblk – List block devices.

7. Package Management

Debian/Ubuntu:

apt update – Update package list.

apt install <package> – Install a package.

RHEL/CentOS:

yum update – Update packages.

yum install <package> – Install a package.

8. Backup and Archive

Backup:

rsync -av /source/ /destination/ – Sync files/directories.

Archiving:

tar -cvf archive.tar /path – Archive files.

gzip archive.tar – Compress the archive.

---

10. General Troubleshooting Commands

uptime – System uptime.

uname -a – Kernel and OS details.

tcpdump – Network packet capture

End-to-End Troubleshooting Example:

1. Identify the Issue:

Use top, df -h, or ping to gather insights.


2. Narrow Down Root Cause:

Use ps aux, netstat, or iotop to trace the issue.


3. Apply Fixes:

Restart services or update packages

--------------------------------------------------------------------------------------------------------------------------

Here are some daily useful commands for DevOps:

hashtag#Linux_Commands:-
1. *Check server uptime*: `uptime`
2. *Check disk usage*: 'df -h`
3. *Check memory usage*: 'free -m`
4. *Check CPU usage*: 'top' or 'htop`
5. *Check logs*: `tail -f /var/log/syslog
6. *Check network connections*: 'netstat -tinp
7. *Check running processes*: 'ps aux'
8. *Kill a process*: 'kill <pid>`
9. *Check file permissions*: `Is -l`
10. *Change file permissions*: 'chmod <permissions> <file>`

hashtag#Docker_Commands:-
1. *List running containers*: 'docker ps`
2. *Start a container*: 'docker start <container_name>`
3. *Stop a container*: 'docker stop <container_name>'
4. *Remove a container*: 'docker rm <container_name>`
5. *List all containers*: 'docker ps -a
6. *Pull an image*: 'docker pull <image_name>`
7. *Run a container*: 'docker run -d <image_name>`
8. *Exec into a container*: 'docker exec -it <container_name> /bin/bash
9. *Check container logs*: 'docker logs <container_name>`
10. *Build a Docker image*: 'docker build -t <image_name>.'

hashtag#Kubernetes_Commands:-
1. *Get nodes*: 'kubectl get nodes'
2. *Get pods*: 'kubectl get pods
3. *Get deployments*: 'kubectl get deployments
4. *Get services*: 'kubectl get svc
5. *Create a deployment*: 'kubectl create deployment <deployment_name> --image=<image_name>`
6. *Apply a configuration*: 'kubectl apply -f <config_file>
7. *Get pod logs*: 'kubectl logs <pod_name>'
8. *Exec into a pod*: 'kubectl exec -it <pod_name> --/bin/bash
9. *Scale a deployment*: 'kubectl scale deployment
<deployment_name> --replicas=<replica_count>`
10. *Delete a pod*: 'kubectl delete pod <pod_name>`

hashtag#Git_Commands:-
1. *Clone a repository*: 'git clone <repository_url>
2. *Check repository status*: 'git status`
3. *Add changes*: 'git add <file_name>`
4. *Commit changes*: 'git commit -m "<commit_message>""
5. *Push changes*: 'git push <remote_name> <branch_name>`
6. *Pull changes*: 'git pull <remote_name> <branch_name>`
7. *Check commit history*: 'git log
8. *Create a new branch*: 'git branch <branch_name>'
9. *Switch to a branch*: 'git checkout <branch_name>`
10. *Merge a branch*: 'git merge <branch_name>`

hashtag#AWS_Commands:-
1. *List EC2 instances*: `aws ec2 describe-instances
2. *Create an EC2 instance*: 'aws ec2 run-instances --image-id <image_id> --instance-type <instance_type>`
3. **Start an EC2 instance


----------------------------------------------------------------------------------------------------------------------------------------------

/*MySQL daily troubleshooting cheatsheet*/ 

-- Check MySQL version and uptime
SELECT VERSION(), NOW(), @@hostname;

-- Show all connected threads
SHOW FULL PROCESSLIST;

-- Quick summary of active threads
SHOW STATUS LIKE 'Threads%';

-- Check current server configuration variables
SHOW VARIABLES;

-- Check server uptime
SHOW GLOBAL STATUS LIKE 'Uptime';

-- Show the 10 most time-consuming queries
SELECT * FROM sys.statement_analysis ORDER BY avg_latency DESC LIMIT 10;

-- Analyze query execution plan
EXPLAIN SELECT * FROM transactions WHERE user_id = 100;

-- See actual execution time (MySQL 8+)
EXPLAIN ANALYZE SELECT * FROM transactions WHERE user_id = 100;

-- Show table I/O and index usage stats
SHOW TABLE STATUS LIKE 'transactions';

-- Check slow queries (enable if needed)
SET GLOBAL slow_query_log = 1;
SHOW VARIABLES LIKE 'slow_query_log_file';

-- View number of slow queries
SHOW GLOBAL STATUS LIKE 'Slow_queries';

/*Index and schema healthcheks*/

-- Show indexes on a table
SHOW INDEX FROM users;

-- Identify missing indexes (manual approach)
EXPLAIN SELECT * FROM users WHERE email = 'abc@example.com';

-- Analyze table statistics for optimizer
ANALYZE TABLE users;

-- Check for fragmented tables (may need OPTIMIZE)
SHOW TABLE STATUS WHERE Data_free > 0;

-- Reclaim space and optimize
OPTIMIZE TABLE users;

/*locking and dead-locking*/

-- Check for transactions waiting on locks
SELECT * FROM performance_schema.data_locks;

-- Check lock waits
SELECT * FROM performance_schema.data_lock_waits;

-- Inspect InnoDB internal lock status
SHOW ENGINE INNODB STATUS \G

-- Identify the blocking session
SELECT * FROM performance_schema.data_lock_waits \G

-- Kill a problematic query (use thread_id from PROCESSLIST)
KILL <thread_id>;

/*Innodb and Memory performence*/

-- Show InnoDB engine status (performance + locks)
SHOW ENGINE INNODB STATUS \G

-- View InnoDB buffer pool usage
SHOW STATUS LIKE 'Innodb_buffer_pool%';

-- Buffer pool hit ratio (should be > 95%)
SELECT ROUND((1 - (SUM(if(variable_name='Innodb_buffer_pool_reads',variable_value,0)) /
                   SUM(if(variable_name='Innodb_buffer_pool_read_requests',variable_value,1))) ) * 100, 2)
       AS buffer_pool_hit_ratio
FROM performance_schema.global_status;

-- Show global memory usage
SHOW GLOBAL STATUS LIKE 'Bytes%';


/*Backup and recovery*/

# Logical backup of one DB
mysqldump -u root -p labdb > backup_labdb.sql

# Restore
mysql -u root -p labdb < backup_labdb.sql

# Backup all databases
mysqldump -u root -p --all-databases > full_backup.sql

/*performance schema*/

-- Check the largest consumers of query time
SELECT * FROM sys.statement_analysis ORDER BY total_latency DESC LIMIT 10;

-- Check top I/O consuming tables
SELECT * FROM sys.schema_table_statistics ORDER BY io_read DESC LIMIT 10;

-- Check memory usage per thread
SELECT * FROM sys.memory_by_thread_by_current_bytes ORDER BY current_allocated DESC LIMIT 10;

-- Find which queries caused the most temp tables
SELECT * FROM sys.statements_with_temp_tables ORDER BY total_latency DESC LIMIT 10;

/*security schema*/

-- List all MySQL users
SELECT user, host FROM mysql.user;

-- View privileges for a specific user
SHOW GRANTS FOR 'labuser'@'%';

-- Find users with SUPER privilege (potential risk)
SELECT user, host FROM mysql.user WHERE Super_priv='Y';

-- Check SSL connections
SHOW STATUS LIKE 'Ssl_%';

# Check running MySQL containers
docker ps | grep mysql

# Access container shell
docker exec -it mysql-primary bash

# Connect directly to MySQL
docker exec -it mysql-primary mysql -uroot -prootpass

# Check MySQL log file
docker exec -it mysql-primary cat /var/lib/mysql/mysql-slow.log

# Check disk space used by MySQL data
du -sh /var/lib/mysql


